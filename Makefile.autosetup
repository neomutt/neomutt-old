###############################################################################
# substitutions by autosetup

PACKAGE=	@PACKAGE@
PACKAGE_VERSION=@PACKAGE_VERSION@
PACKAGE_DATE=	@PACKAGE_DATE@

# Build-time compiler and flags. These are used for building executables that
# are only used at build-time, e.g., doc/makedoc. These are different from CC /
# CFLAGS / LDFLAGS because the host and target systems might be different.
CC_FOR_BUILD=		@CC_FOR_BUILD@
CFLAGS_FOR_BUILD=	@CFLAGS_FOR_BUILD@ $(EXTRA_CFLAGS_FOR_BUILD)
LDFLAGS_FOR_BUILD=	@LDFLAGS_FOR_BUILD@ $(EXTRA_LDFLAGS_FOR_BUILD)

PWD=		@PWD@
AR=		@AR@
CC=		@CC@
CPP=		@CPP@
CFLAGS=		@CPPFLAGS@ @CFLAGS@ -I. -I@srcdir@ -Wall $(EXTRA_CFLAGS)
LDFLAGS=	@LDFLAGS@ $(EXTRA_LDFLAGS)
EXEEXT=		@EXEEXT@
LIBS=		@LIBS@
@if ENABLE_NLS
INTLLIBS=	@INTLLIBS@
@endif
RANLIB=		@RANLIB@
SRCDIR=		@srcdir@
INSTALL=	@INSTALL@ -c
INSTALL_DATA=	@INSTALL@ -m 644
MKDIR_P=	mkdir -p
RM=		rm -fr
DEPFILES=	$(ALLOBJS:.o=.Po)
BINFILES=	$(NEOMUTT)
@if HAVE_PGP
LIBBINFILES+=	$(PGPEWRAP)
@endif
@if HAVE_SMIME
LIBBINFILES+=	$(SRCDIR)/contrib/smime_keys
@endif

# paths
bindir=		@BINDIR@
datadir=	@PKGDATADIR@
docdir=		@PKGDOCDIR@
mandir=		@mandir@
libdir=		@libdir@
libexecdir=	@libexecdir@
sysconfdir=	@SYSCONFDIR@
textdomaindir=	@MUTTLOCALEDIR@

# targets for specific subdirectories
ALL_TARGETS=		@ALL_TARGETS@
CLEAN_TARGETS=		@CLEAN_TARGETS@
INSTALL_TARGETS=	@INSTALL_TARGETS@
UNINSTALL_TARGETS=	@UNINSTALL_TARGETS@

VPATH=		@VPATH@

ALL_FILES!=	(cd $(SRCDIR) && git ls-files 2>/dev/null) || true

###############################################################################
# neomutt
NEOMUTT=	neomutt$(EXEEXT)
NEOMUTTOBJS=	addrbook.o alias.o bcache.o browser.o color.o commands.o \
		complete.o compose.o compress.o conststrings.o context.o copy.o \
		curs_lib.o edit.o editmsg.o enriched.o enter.o filter.o flags.o \
		git_ver.o handler.o hdrline.o help.o hook.o icommands.o index.o init.o \
		keymap.o mailcap.o main.o menu.o mutt_account.o mutt_attach.o \
		mutt_body.o mutt_curses.o mutt_header.o mutt_history.o mutt_logging.o mutt_mailbox.o \
		mutt_parse.o mutt_signal.o mutt_socket.o mutt_thread.o mutt_window.o \
		muttlib.o mx.o myvar.o pager.o pattern.o postpone.o progress.o query.o \
		recvattach.o recvcmd.o resize.o rfc3676.o score.o send.o sendlib.o \
		sidebar.o smtp.o sort.o state.o status.o system.o terminal.o version.o
@if HAVE_LIBUNWIND
NEOMUTTOBJS+=	backtrace.o
@endif

@if !HAVE_WCSCASECMP
NEOMUTTOBJS+=	wcscasecmp.o
@endif
@if MIXMASTER
NEOMUTTOBJS+=	remailer.o
@endif
@if USE_LUA
NEOMUTTOBJS+=	mutt_lua.o
@endif
@if USE_INOTIFY
NEOMUTTOBJS+=	monitor.o
@endif
CLEANFILES+=	$(NEOMUTT) $(NEOMUTTOBJS)
ALLOBJS+=	$(NEOMUTTOBJS)

###############################################################################
# libautocrypt
@if USE_AUTOCRYPT
LIBAUTOCRYPT=	libautocrypt.a
LIBAUTOCRYPTOBJS=	autocrypt/autocrypt.o autocrypt/autocrypt_acct_menu.o \
			autocrypt/autocrypt_db.o autocrypt/autocrypt_gpgme.o \
			autocrypt/autocrypt_schema.o

CLEANFILES+=	$(LIBAUTOCRYPT) $(LIBAUTOCRYPTOBJS)
MUTTLIBS+=	$(LIBAUTOCRYPT)
ALLOBJS+=	$(LIBAUTOCRYPTOBJS)
@endif

###############################################################################
# libpop
LIBPOP=	libpop.a
LIBPOPOBJS=	pop/pop.o pop/pop_auth.o pop/pop_lib.o
CLEANFILES+=	$(LIBPOP) $(LIBPOPOBJS)
MUTTLIBS+=	$(LIBPOP)
ALLOBJS+=	$(LIBPOPOBJS)

###############################################################################
# libnntp
LIBNNTP=	libnntp.a
LIBNNTPOBJS=	nntp/browse.o nntp/complete.o nntp/newsrc.o nntp/nntp.o
CLEANFILES+=	$(LIBNNTP) $(LIBNNTPOBJS)
MUTTLIBS+=	$(LIBNNTP)
ALLOBJS+=	$(LIBNNTPOBJS)

###############################################################################
# libmbox
LIBMBOX=	libmbox.a
LIBMBOXOBJS=	mbox/mbox.o
CLEANFILES+=	$(LIBMBOX) $(LIBMBOXOBJS)
MUTTLIBS+=	$(LIBMBOX)
ALLOBJS+=	$(LIBMBOXOBJS)

###############################################################################
# libnotmuch
@if USE_NOTMUCH
LIBNOTMUCH=	libnotmuch.a
LIBNOTMUCHOBJS=	notmuch/mutt_notmuch.o notmuch/nm_db.o
CLEANFILES+=	$(LIBNOTMUCH) $(LIBNOTMUCHOBJS)
MUTTLIBS+=	$(LIBNOTMUCH)
ALLOBJS+=	$(LIBNOTMUCHOBJS)
@endif

###############################################################################
# libmaildir
LIBMAILDIR=	libmaildir.a
LIBMAILDIROBJS=	maildir/maildir.o maildir/mh.o maildir/shared.o
CLEANFILES+=	$(LIBMAILDIR) $(LIBMAILDIROBJS)
MUTTLIBS+=	$(LIBMAILDIR)
ALLOBJS+=	$(LIBMAILDIROBJS)

###############################################################################
# libncrypt
LIBNCRYPT=	libncrypt.a
LIBNCRYPTOBJS=	ncrypt/crypt.o ncrypt/cryptglue.o ncrypt/crypt_mod.o
@if HAVE_GPGME
LIBNCRYPTOBJS+=	ncrypt/crypt_gpgme.o ncrypt/crypt_mod_pgp_gpgme.o \
		ncrypt/crypt_mod_smime_gpgme.o
@endif
@if HAVE_PGP
LIBNCRYPTOBJS+=	ncrypt/crypt_mod_pgp_classic.o ncrypt/gnupgparse.o \
		ncrypt/pgp.o ncrypt/pgpinvoke.o ncrypt/pgpkey.o ncrypt/pgplib.o \
		ncrypt/pgpmicalg.o ncrypt/pgppacket.o
@endif
@if HAVE_SMIME
LIBNCRYPTOBJS+=	ncrypt/crypt_mod_smime_classic.o ncrypt/smime.o
@endif
CLEANFILES+=	$(LIBNCRYPT) $(LIBNCRYPTOBJS)
MUTTLIBS+=	$(LIBNCRYPT)
ALLOBJS+=	$(LIBNCRYPTOBJS)

###############################################################################
# libimap
LIBIMAP=	libimap.a
LIBIMAPOBJS=	imap/auth.o imap/auth_anon.o imap/auth_cram.o \
		imap/auth_login.o imap/auth_oauth.o imap/auth_plain.o imap/browse.o \
		imap/command.o imap/imap.o imap/message.o imap/utf7.o imap/util.o
@if USE_GSS
LIBIMAPOBJS+=	imap/auth_gss.o
@endif
@if HAVE_SASL
LIBIMAPOBJS+=	imap/auth_sasl.o
@endif
CLEANFILES+=	$(LIBIMAP) $(LIBIMAPOBJS)
MUTTLIBS+=	$(LIBIMAP)
ALLOBJS+=	$(LIBIMAPOBJS)

###############################################################################
# libconn
LIBCONN=	libconn.a
LIBCONNOBJS=	conn/conn_globals.o conn/conn_raw.o conn/getdomain.o \
		conn/sasl_plain.o conn/socket.o conn/tunnel.o
@if HAVE_SASL
LIBCONNOBJS+=	conn/sasl.o
@endif
@if USE_SSL_OPENSSL
LIBCONNOBJS+=	conn/ssl.o
@endif
@if USE_SSL_GNUTLS
LIBCONNOBJS+=	conn/ssl_gnutls.o
@endif
CLEANFILES+=	$(LIBCONN) $(LIBCONNOBJS)
MUTTLIBS+=	$(LIBCONN)
ALLOBJS+=	$(LIBCONNOBJS)

###############################################################################
# libhcache
@if USE_HCACHE
LIBHCACHE=	libhcache.a
LIBHCACHEOBJS=	hcache/hcache.o hcache/serialize.o
CLEANFILES+=	$(LIBHCACHE) $(LIBHCACHEOBJS)
MUTTLIBS+=	$(LIBHCACHE)
ALLOBJS+=	$(LIBHCACHEOBJS)
@if HAVE_BDB
LIBHCACHEOBJS+=	hcache/bdb.o
@endif
@if HAVE_GDBM
LIBHCACHEOBJS+=	hcache/gdbm.o
@endif
@if HAVE_KC
LIBHCACHEOBJS+=	hcache/kc.o
@endif
@if HAVE_LMDB
LIBHCACHEOBJS+=	hcache/lmdb.o
@endif
@if HAVE_QDBM
LIBHCACHEOBJS+=	hcache/qdbm.o
@endif
@if HAVE_TC
LIBHCACHEOBJS+=	hcache/tc.o
@endif
@endif # USE_HCACHE

###############################################################################
# pgpewrap
PGPEWRAP=	pgpewrap$(EXEEXT)
PGPEWRAPOBJS=	pgpewrap.o
CLEANFILES+=	$(PGPEWRAP) $(PGPEWRAPOBJS)
ALLOBJS+=	$(PGPEWRAPOBJS)

###############################################################################
# libcore
LIBCORE=	libcore.a
LIBCOREOBJS=	core/account.o core/mailbox.o core/neomutt.o

CLEANFILES+=	$(LIBCORE) $(LIBCOREOBJS)
MUTTLIBS+=	$(LIBCORE)
ALLOBJS+=	$(LIBCOREOBJS)

###############################################################################
# libconfig
LIBCONFIG=	libconfig.a
LIBCONFIGOBJS=	config/address.o config/bool.o config/dump.o config/enum.o \
		config/long.o config/mbtable.o config/number.o config/quad.o \
		config/regex.o config/set.o config/slist.o config/sort.o \
		config/string.o config/subset.o

CLEANFILES+=	$(LIBCONFIG) $(LIBCONFIGOBJS)
MUTTLIBS+=	$(LIBCONFIG)
ALLOBJS+=	$(LIBCONFIGOBJS)

###############################################################################
# libemail
LIBEMAIL=	libemail.a
LIBEMAILOBJS=	email/attach.o email/body.o email/email.o \
		email/email_globals.o email/envelope.o email/from.o email/mime.o \
		email/parameter.o email/parse.o email/rfc2047.o email/rfc2231.o \
		email/tags.o email/thread.o email/url.o
CLEANFILES+=	$(LIBEMAIL) $(LIBEMAILOBJS)
MUTTLIBS+=	$(LIBEMAIL)
ALLOBJS+=	$(LIBEMAILOBJS)

###############################################################################
# libaddress
LIBADDRESS=	libaddress.a
LIBADDRESSOBJS=	address/address.o address/group.o address/idna.o

CLEANFILES+=	$(LIBADDRESS) $(LIBADDRESSOBJS)
MUTTLIBS+=	$(LIBADDRESS)
ALLOBJS+=	$(LIBADDRESSOBJS)

###############################################################################
# libmutt
LIBMUTT=	libmutt.a
LIBMUTTOBJS=	mutt/base64.o mutt/buffer.o mutt/charset.o mutt/date.o \
		mutt/envlist.o mutt/exit.o mutt/file.o mutt/hash.o mutt/history.o \
		mutt/list.o mutt/logging.o mutt/mapping.o mutt/mbyte.o mutt/md5.o \
		mutt/memory.o mutt/notify.o mutt/path.o mutt/pool.o mutt/regex.o \
		mutt/signal.o mutt/slist.o mutt/string.o rxi-vec/vec.o
CLEANFILES+=	$(LIBMUTT) $(LIBMUTTOBJS)
MUTTLIBS+=	$(LIBMUTT)
ALLOBJS+=	$(LIBMUTTOBJS)

###############################################################################
# generated
GENERATED=	git_ver.c hcache/hcversion.h
CLEANFILES+=	$(GENERATED)

##############################################################################
# targets
all: $(BINFILES) $(LIBBINFILES) $(ALL_TARGETS)

# compile + dependencies
.c.o:
	$(CC) $(CFLAGS) -MT $@ -MD -MP -MF $*.Tpo -c -o $@ $<
	@mv $*.Tpo $*.Po

$(ALLOBJS):

# mutt
$(NEOMUTT): $(GENERATED) $(NEOMUTTOBJS) $(MUTTLIBS)
	$(CC) -o $@ $(NEOMUTTOBJS) $(MUTTLIBS) $(LDFLAGS) $(LIBS)

# libmutt
$(LIBMUTT): $(PWD)/mutt $(LIBMUTTOBJS)
	$(AR) cr $@ $(LIBMUTTOBJS)
	$(RANLIB) $@
$(PWD)/mutt:
	$(MKDIR_P) $(PWD)/mutt

# libaddress
$(LIBADDRESS): $(PWD)/address $(LIBADDRESSOBJS)
	$(AR) cr $@ $(LIBADDRESSOBJS)
	$(RANLIB) $@
$(PWD)/address:
	$(MKDIR_P) $(PWD)/address

# libautocrypt
$(LIBAUTOCRYPT): $(PWD)/autocrypt $(LIBAUTOCRYPTOBJS)
	$(AR) cr $@ $(LIBAUTOCRYPTOBJS)
	$(RANLIB) $@
$(PWD)/autocrypt:
	$(MKDIR_P) $(PWD)/autocrypt

# libemail
$(LIBEMAIL): $(PWD)/email $(LIBEMAILOBJS)
	$(AR) cr $@ $(LIBEMAILOBJS)
	$(RANLIB) $@
$(PWD)/email:
	$(MKDIR_P) $(PWD)/email

# libpop
$(LIBPOP): $(PWD)/pop $(LIBPOPOBJS)
	$(AR) cr $@ $(LIBPOPOBJS)
	$(RANLIB) $@
$(PWD)/pop:
	$(MKDIR_P) $(PWD)/pop

# libnntp
$(LIBNNTP): $(PWD)/nntp $(LIBNNTPOBJS)
	$(AR) cr $@ $(LIBNNTPOBJS)
	$(RANLIB) $@
$(PWD)/nntp:
	$(MKDIR_P) $(PWD)/nntp

# libmbox
$(LIBMBOX): $(PWD)/mbox $(LIBMBOXOBJS)
	$(AR) cr $@ $(LIBMBOXOBJS)
	$(RANLIB) $@
$(PWD)/mbox:
	$(MKDIR_P) $(PWD)/mbox

# libnotmuch
$(LIBNOTMUCH): $(PWD)/notmuch $(LIBNOTMUCHOBJS)
	$(AR) cr $@ $(LIBNOTMUCHOBJS)
	$(RANLIB) $@
$(PWD)/notmuch:
	$(MKDIR_P) $(PWD)/notmuch

# libmaildir
$(LIBMAILDIR): $(PWD)/maildir $(LIBMAILDIROBJS)
	$(AR) cr $@ $(LIBMAILDIROBJS)
	$(RANLIB) $@
$(PWD)/maildir:
	$(MKDIR_P) $(PWD)/maildir

# libncrypt
$(LIBNCRYPT): $(PWD)/ncrypt $(LIBNCRYPTOBJS)
	$(AR) cr $@ $(LIBNCRYPTOBJS)
	$(RANLIB) $@
$(PWD)/ncrypt:
	$(MKDIR_P) $(PWD)/ncrypt

# libimap
$(LIBIMAP): $(PWD)/imap $(LIBIMAPOBJS)
	$(AR) cr $@ $(LIBIMAPOBJS)
	$(RANLIB) $@
$(PWD)/imap:
	$(MKDIR_P) $(PWD)/imap

# libconn
$(LIBCONN): $(PWD)/conn $(LIBCONNOBJS)
	$(AR) cr $@ $(LIBCONNOBJS)
	$(RANLIB) $@
$(PWD)/conn:
	$(MKDIR_P) $(PWD)/conn

# libcore
$(LIBCORE): $(PWD)/core $(LIBCOREOBJS)
	$(AR) cr $@ $(LIBCOREOBJS)
	$(RANLIB) $@
$(PWD)/core:
	$(MKDIR_P) $(PWD)/core

# libconfig
$(LIBCONFIG): $(PWD)/config $(LIBCONFIGOBJS)
	$(AR) cr $@ $(LIBCONFIGOBJS)
	$(RANLIB) $@
$(PWD)/config:
	$(MKDIR_P) $(PWD)/config

# libhcache
hcache/hcache.o:	hcache/hcversion.h
$(LIBHCACHE): $(PWD)/hcache $(LIBHCACHEOBJS)
	$(AR) cr $@ $(LIBHCACHEOBJS)
	$(RANLIB) $@
$(PWD)/hcache:
	$(MKDIR_P) $(PWD)/hcache

# pgpewrap
$(PGPEWRAP): $(PGPEWRAPOBJS)
	$(CC) $(LDFLAGS) -o $@ $(PGPEWRAPOBJS)

# generated
git_ver.c: $(ALL_FILES)
	version=`git describe --dirty --abbrev=6 --match "20[0-9][0-9][0-9][0-9][0-9][0-9]" 2> /dev/null | \
		sed -e 's/^[0-9]\{8\}//; s/-g\([a-z0-9]\{6\}\)/-\1/'`; \
	echo 'const char *GitVer = "'$$version'";' > $@.tmp; \
	cmp -s $@.tmp $@ || mv $@.tmp $@; \
	rm -f $@.tmp

hcache/hcversion.h:	$(SRCDIR)/address/address.h $(SRCDIR)/email/body.h \
			$(SRCDIR)/email/email.h $(SRCDIR)/email/envelope.h \
			$(SRCDIR)/email/parameter.h $(SRCDIR)/hcache/hcachever.sh \
			$(SRCDIR)/mutt/buffer.h $(SRCDIR)/mutt/list.h
	$(MKDIR_P) $(PWD)/hcache
	( echo '#include "config.h"'; \
	echo '#include "address/address.h"'; \
	echo '#include "email/body.h"'; \
	echo '#include "email/email.h"'; \
	echo '#include "email/envelope.h"'; \
	echo '#include "email/parameter.h"'; \
	echo '#include "mutt/buffer.h"'; \
	echo '#include "mutt/list.h"';) | $(CPP) $(CFLAGS) - | \
	sh $(SRCDIR)/hcache/hcachever.sh hcache/hcversion.h

# clean
clean: $(CLEAN_TARGETS)
	rm -f $(CLEANFILES)

# install
install: all $(INSTALL_TARGETS)
	# Install binaries
	$(MKDIR_P) $(DESTDIR)$(bindir)
	for f in $(BINFILES); do \
		$(INSTALL) $$f $(DESTDIR)$(bindir)/`basename $$f` || exit 1; \
	done
	$(MKDIR_P) $(DESTDIR)$(libexecdir)/$(PACKAGE)
	for f in $(LIBBINFILES); do \
		$(INSTALL) $$f $(DESTDIR)$(libexecdir)/$(PACKAGE)/`basename $$f` || exit 1; \
	done

# uninstall
uninstall: $(UNINSTALL_TARGETS)
	# Uninstall binaries
	for f in $(BINFILES); do \
		$(RM) $(DESTDIR)$(bindir)/`basename $$f`; \
	done
	for f in $(LIBBINFILES); do \
		$(RM) $(DESTDIR)$(libexecdir)/$(PACKAGE)/`basename $$f`; \
	done

# distclean
distclean: clean
	$(RM) $(DEPFILES) autosetup/jimsh0 config.h config.log conststrings.c \
		contrib/Makefile doc/Makefile doc/neomutt.1 html Makefile po/Makefile \
		test/Makefile .clang_complete
	$(RM) *.gc?? */*.gc?? test/*/*.gc??
	$(RM) lcov.info lcov

@if ENABLE_COVERAGE
# coverage testing
coverage: all test
	$(RM) lcov
	$(RM) mutt/exit.gc??
	lcov --test-name "test" --output-file lcov.info --capture \
	  --directory address \
	  --directory config \
	  --directory email \
	  --directory mutt
	-genhtml --output-directory lcov --frames lcov.info
	lcov --list lcov.info
@endif

##############################################################################
# include generated dependency files
-include $(DEPFILES)

##############################################################################
# include special-purpose makefiles, each one of which MUST define the
# dedicated all-, clean-, install-, and uninstall- targets.
@include @srcdir@/po/Makefile.autosetup
@include @srcdir@/contrib/Makefile.autosetup
@include @srcdir@/doc/Makefile.autosetup
@if ENABLE_UNIT_TESTS
@include @srcdir@/test/Makefile.autosetup
@endif

# vim: set ts=8 noexpandtab:
