
From: Antonio Radici <antonio@debian.org>
Date: Thu, 27 Feb 2014 16:22:51 +0100
Subject: 467432-write_bcc
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

The purpose of this patch is to alter the behavior of the write_bcc option
because exim4, the default SMTP in Debian, does not strip the Bcc headers; by
default write_bcc is set so this could cause a privacy leak.

The behavior that this patch introduces is: never write the Bcc header when the
message is sent, otherwise, if the message is sent to Fcc, then this optin
will be evaluated and the Bcc header will be written based on that.

Background discussion on this is in the following bugs:
http://bugs.debian.org/304718
http://bugs.debian.org/467432

This patch is a slightly modified version of the patch provided by
Stefan VÃ¶lkel <stefan@bc-bd.org> in the second bug.

To apply to neomutt by:
From dde9dcf6f4923752ab1bd4d22ccde7386cfa7819 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Fri, 6 May 2016 00:24:00 +0100
Subject: [PATCH 11/22] debian-specific/467432-write_bcc

---
 headers.c |  2 +-
 init.h    | 11 +++--------
 main.c    |  2 +-
 protos.h  |  2 +-
 send.c    |  4 ++--
 sendlib.c |  6 +++---
 6 files changed, 11 insertions(+), 16 deletions(-)

Index: neomutt-20160818/headers.c
===================================================================
--- neomutt-20160818.orig/headers.c
+++ neomutt-20160818/headers.c
@@ -52,7 +52,7 @@ void mutt_edit_headers (const char *edit
   }
   
   mutt_env_to_local (msg->env);
-  mutt_write_rfc822_header (ofp, msg->env, NULL, 1, 0);
+  mutt_write_rfc822_header (ofp, msg->env, NULL, 1, 0, 1);
   fputc ('\n', ofp);	/* tie off the header. */
 
   /* now copy the body of the message. */
Index: neomutt-20160818/init.h
===================================================================
--- neomutt-20160818.orig/init.h
+++ neomutt-20160818/init.h
@@ -4109,14 +4109,9 @@ struct option_t MuttVars[] = {
   { "write_bcc",	DT_BOOL, R_NONE, OPTWRITEBCC, 1},
   /*
   ** .pp
-  ** Controls whether mutt writes out the ``Bcc:'' header when preparing
-  ** messages to be sent.  Exim users may wish to unset this. If mutt
-  ** is set to deliver directly via SMTP (see $$smtp_url), this
-  ** option does nothing: mutt will never write out the ``Bcc:'' header
-  ** in this case.
-  ** .pp
-  ** \fBNote:\fP On Debian systems, exim4 and postfix strip BCC headers by
-  ** default. The above warning applies to exim3 users, see /etc/Muttrc.
+  ** Controls whether mutt writes out the Bcc header when saving
+  ** messages to FCC. Bcc headers will never be written to a message
+  ** when sending it. Note: this behavior is Debian specific.
   */
   { "write_inc",	DT_NUMBER,	 R_NONE, UL &WriteInc, 10 },
   /*
Index: neomutt-20160818/main.c
===================================================================
--- neomutt-20160818.orig/main.c
+++ neomutt-20160818/main.c
@@ -764,7 +764,7 @@ int main (int argc, char **argv)
           mutt_env_to_intl (msg->env, NULL, NULL);
         }
 
-        mutt_write_rfc822_header (fout, msg->env, msg->content, -1, 0);
+        mutt_write_rfc822_header (fout, msg->env, msg->content, -1, 0, 1);
         if (option (OPTRESUMEEDITEDDRAFTFILES))
           fprintf (fout, "X-Mutt-Resume-Draft: 1\n");
         fputc ('\n', fout);
Index: neomutt-20160818/protos.h
===================================================================
--- neomutt-20160818.orig/protos.h
+++ neomutt-20160818/protos.h
@@ -397,7 +397,7 @@ int mutt_write_multiple_fcc (const char
 int mutt_write_mime_body (struct Body *, FILE *);
 int mutt_write_mime_header (struct Body *, FILE *);
 int mutt_write_one_header (FILE *fp, const char *tag, const char *value, const char *pfx, int wraplen, int flags);
-int mutt_write_rfc822_header (FILE *, struct Envelope *, struct Body *, int, int);
+int mutt_write_rfc822_header (FILE *, struct Envelope *, struct Body *, int, int, int);
 void mutt_write_references (struct List *, FILE *, int);
 int mutt_yesorno (const char *, int);
 void mutt_set_header_color(struct Context *, struct Header *);
Index: neomutt-20160818/send.c
===================================================================
--- neomutt-20160818.orig/send.c
+++ neomutt-20160818/send.c
@@ -1086,10 +1086,10 @@ static int send_message (struct Header *msg)
     unset_option (OPTWRITEBCC);
 #endif
 #ifdef MIXMASTER
-  mutt_write_rfc822_header (tempfp, msg->env, msg->content, 0, msg->chain ? 1 : 0);
+  mutt_write_rfc822_header (tempfp, msg->env, msg->content, 0, msg->chain ? 1 : 0, 0);
 #endif
 #ifndef MIXMASTER
-  mutt_write_rfc822_header (tempfp, msg->env, msg->content, 0, 0);
+  mutt_write_rfc822_header (tempfp, msg->env, msg->content, 0, 0, 0);
 #endif
 #ifdef USE_SMTP
   if (old_write_bcc)
Index: neomutt-20160818/sendlib.c
===================================================================
--- neomutt-20160818.orig/sendlib.c
+++ neomutt-20160818/sendlib.c
@@ -1945,7 +1945,7 @@ out:
 
 
 int mutt_write_rfc822_header (FILE *fp, struct Envelope *env, struct Body *attach,
-			      int mode, int privacy)
+			      int mode, int privacy, int should_write_bcc)
 {
   char buffer[LONG_STRING];
   char *p, *q;
@@ -1994,7 +1994,7 @@ int mutt_write_rfc822_header (FILE *fp,
 #endif
     fputs ("Cc: \n", fp);
 
-  if (env->bcc)
+  if (env->bcc && should_write_bcc)
   {
     if(mode != 0 || option(OPTWRITEBCC))
     {
@@ -2847,7 +2847,7 @@ int mutt_write_fcc (const char *path, HE
   /* post == 1 => postpone message. Set mode = -1 in mutt_write_rfc822_header()
    * post == 0 => Normal mode. Set mode = 0 in mutt_write_rfc822_header()
    * */
-  mutt_write_rfc822_header (msg->fp, hdr->env, hdr->content, post ? -post : 0, 0);
+  mutt_write_rfc822_header (msg->fp, hdr->env, hdr->content, post ? -post : 0, 0, 1);
 
   /* (postponment) if this was a reply of some sort, <msgid> contians the
    * Message-ID: of message replied to.  Save it using a special X-Mutt-
